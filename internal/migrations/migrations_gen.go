// Code generated by go-bindata.
// sources:
// ../../migrations/0001_initial.sql
// ../../migrations/0002_join_accept_params.sql
// ../../migrations/0003_rx_window_and_rx2_dr.sql
// ../../migrations/0004_add_node_apps_nwks_key_name_devaddr.sql
// ../../migrations/0005_add_queue.sql
// ../../migrations/0006_remove_application_table.sql
// ../../migrations/0007_migrate_channels_to_channel_list.sql
// ../../migrations/0008_relax_fcnt.sql
// ../../migrations/0009_adr_interval_and_install_margin.sql
// ../../migrations/0010_recreate_application_table.sql
// ../../migrations/0011_node_description_and_is_abp.sql
// ../../migrations/0012_class_c_node.sql
// ../../migrations/0013_application_settings.sql
// ../../migrations/0014_users_and_application_users.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x4e\xc3\x30\x10\x45\xd7\xb5\xe4\x3b\xcc\xb2\x15\x54\x2a\xeb\x6e\xb9\x02\xeb\x68\x6a\x7f\x8a\x55\x67\x6c\x4d\x9c\x82\x6f\x8f\x6a\x52\x48\x22\xba\x8b\x66\x7e\xde\x7f\x9e\xfd\x9e\x9e\xfa\x70\x56\x2e\xa0\xb7\x6c\x8d\x53\xdc\x3e\x0b\x9f\x22\x88\x73\x8e\xc1\x71\x09\x49\x68\x6b\xcd\x86\x73\xee\x30\x06\x3a\xd5\x02\xa6\xac\xa1\x67\xad\x74\x41\x7d\xb6\x66\x23\xdc\x83\xdc\x07\x2b\xbb\x02\xa5\x2b\x6b\x0d\x72\xa6\xed\xcb\xe1\xb0\x23\x49\x85\x64\x8c\xd1\x9a\xdd\xd1\x9a\x55\x8d\x24\x8f\xc6\xf7\xb8\x3e\xe6\x2f\xcb\x15\xef\x50\x88\xc3\xb0\xb0\x4c\x42\x1e\x11\x05\xe4\x78\x70\xec\xf1\xdb\x7c\x47\x5c\x50\x27\xc4\x7c\x33\x0e\xf0\xdd\xad\x5e\x52\x63\xb6\xc4\x4a\x36\x88\xc7\x57\x93\xed\xee\x2e\x49\x26\xf9\x69\xf0\x93\x9f\xdf\xf4\x35\x7d\x8a\x35\x5e\x53\xfe\xe7\xff\x96\x6e\xbb\xbf\x43\xac\x67\xb3\xd7\x1d\xad\xf9\x0e\x00\x00\xff\xff\x97\x04\x56\x84\xaf\x01\x00\x00")

func _0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialSql,
		"0001_initial.sql",
	)
}

func _0001_initialSql() (*asset, error) {
	bytes, err := _0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.sql", size: 431, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_join_accept_paramsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x6e\xfa\x30\x0c\xc6\xcf\x54\xca\x3b\xf8\x48\xf5\x2f\x52\xf9\xef\xb0\x03\x83\xd3\x5e\x61\xe7\xca\x24\x6e\x89\x48\x1d\x70\xd3\x6d\x7d\xfb\xa9\x41\xed\x4a\x01\x6d\xda\x2d\xb2\xfd\xf9\xf7\xf9\x53\x56\x2b\xf8\x57\xdb\x4a\x30\x10\xbc\x9d\x54\xa2\x85\xfa\x67\xc0\xbd\x23\xd0\x07\x64\x26\x57\x38\xdb\x04\x58\xaa\x64\x61\x0d\xec\x6d\xd5\x90\x58\x74\x70\x12\x5b\xa3\x74\x70\xa4\x2e\x53\xc9\x82\xb1\x8e\x0a\x41\x1d\x48\xe0\x1d\xa5\xb3\x5c\xc1\x72\x9d\xe7\x29\xb0\x0f\xc0\xad\x73\x2a\x49\x37\x2a\xb9\x8f\xf9\x91\x30\xb5\x53\x5c\x06\x2d\x07\x10\x2a\x49\x88\x35\x35\xd7\x86\x3d\x83\x21\x47\x81\x40\x63\xa3\xd1\xd0\xe8\x62\xb2\x0c\x2c\x07\xaa\x48\xae\x7a\xa5\xd0\xb9\x25\xd6\xdd\xdd\xae\x3e\x90\x3e\xc2\x72\x58\xb0\xdb\xc2\x13\x20\x9b\xf1\x8c\x97\x2d\x3c\xc7\xc2\xf7\x9a\x1d\xe4\x69\x2f\x6d\xd9\x9e\x5b\x1a\xb5\xc3\x25\xd9\xa0\x4d\x87\x7c\xd0\xf5\x19\x5e\xe2\x61\x6f\x48\x25\x0b\x34\x06\xb4\x77\x6d\xcd\x20\x9f\x85\x21\x87\xd1\xde\xff\xd1\x1b\x18\x2a\xb1\x75\x01\xf2\x6c\x3e\xbe\x2e\x8c\x14\xbe\x2c\x1b\x0a\xbf\xd4\xfc\x39\xeb\x1e\xd1\x6f\x7e\x78\x46\x2c\xcd\x0f\x31\xe2\x4f\x83\x97\xec\x76\x6a\xea\x7f\x3a\x1a\x21\xd3\x2f\xfc\xea\x3f\xf8\x2e\x36\xaa\x66\xd4\xec\xa6\x3e\xe1\xcc\x9b\xb3\x40\x22\x39\xf6\xaf\xfe\xf0\x83\x72\x54\x6d\x54\xf2\x15\x00\x00\xff\xff\x0a\xdc\x76\x87\x6e\x03\x00\x00")

func _0002_join_accept_paramsSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_join_accept_paramsSql,
		"0002_join_accept_params.sql",
	)
}

func _0002_join_accept_paramsSql() (*asset, error) {
	bytes, err := _0002_join_accept_paramsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_join_accept_params.sql", size: 878, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0003_rx_window_and_rx2_drSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\x31\x0a\xc2\x40\x10\x85\xe1\xda\x85\xbd\xc3\xeb\x4d\x40\xd2\xa6\xf5\x0a\xd6\x61\x75\x46\x59\x98\xcc\x84\x61\x96\xf5\xf8\x62\x27\x46\xeb\xf7\xc3\xfb\xc6\x11\xc7\xb5\x3e\xbc\x04\xe3\xb2\xe5\x54\x24\xd8\x11\xe5\x2a\x0c\x35\xe2\x9c\x0e\x85\x08\x37\x93\xb6\x2a\xfc\xb9\xf4\xaa\x64\x1d\x55\x63\x82\x5a\x40\x9b\x08\x88\xef\xa5\x49\xe0\x34\x7c\xf7\xd3\x42\xfe\x2f\x9e\x73\xca\xe9\x13\x70\xb6\xae\x3f\x09\xe4\xb6\xed\x0c\xc3\x6e\x78\x9f\xcd\x39\xbd\x02\x00\x00\xff\xff\x69\x1e\xc5\x12\xd4\x00\x00\x00")

func _0003_rx_window_and_rx2_drSqlBytes() ([]byte, error) {
	return bindataRead(
		__0003_rx_window_and_rx2_drSql,
		"0003_rx_window_and_rx2_dr.sql",
	)
}

func _0003_rx_window_and_rx2_drSql() (*asset, error) {
	bytes, err := _0003_rx_window_and_rx2_drSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0003_rx_window_and_rx2_dr.sql", size: 212, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0004_add_node_apps_nwks_key_name_devaddrSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\xcd\x4a\xc3\x40\x14\x85\xd7\x0e\xcc\x3b\xdc\x5d\x5a\x6c\x25\xae\x4b\x77\xfa\x08\xee\x0a\xe1\x36\xf7\xd4\x86\xce\x1f\x93\x3b\x8d\x7d\x7b\x49\xfc\x41\x1b\x41\x37\xce\xee\x72\x38\x1f\xc3\x77\xd6\x6b\xba\xf5\xdd\x73\x66\x05\x3d\x25\x6b\xd8\x29\x32\x29\xef\x1d\x28\x44\x81\x35\x37\x2c\x42\x6d\x74\xc5\x07\xe2\x94\x9a\xbe\x39\xe1\x42\xfb\x8b\x82\x29\x44\xa5\x50\x9c\x23\xc1\x81\x8b\x53\x7a\xac\x76\xbb\x97\xfa\x97\x57\xad\xbe\x53\xc3\x70\xfa\x07\xaa\xe0\xdc\xb0\x48\xfe\x13\x74\xf6\x25\xf6\xa0\x33\xe7\xf6\xc8\x79\x71\x5f\xd7\xcb\x79\xbf\xaa\x36\xd6\x58\x53\x92\x8c\xee\x46\x57\xd4\x43\xa7\xe6\x76\xd1\xc3\xa1\x7d\x3b\xe8\x90\xa3\x1f\xcd\xb9\xae\x65\xed\x62\xa0\xe1\x88\x8c\xc9\x25\x4a\x47\xdb\xa9\x7b\xf7\x7e\x2e\x27\xe8\xd7\x55\x1e\xe2\x10\x7e\xdc\x45\x72\x4c\xb3\x61\x56\x57\xc1\xa7\xdb\xeb\xe0\x43\xcf\xac\xc0\x1e\x1b\x6b\x5e\x03\x00\x00\xff\xff\xa7\x2b\x00\x52\x18\x02\x00\x00")

func _0004_add_node_apps_nwks_key_name_devaddrSqlBytes() ([]byte, error) {
	return bindataRead(
		__0004_add_node_apps_nwks_key_name_devaddrSql,
		"0004_add_node_apps_nwks_key_name_devaddr.sql",
	)
}

func _0004_add_node_apps_nwks_key_name_devaddrSql() (*asset, error) {
	bytes, err := _0004_add_node_apps_nwks_key_name_devaddrSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0004_add_node_apps_nwks_key_name_devaddr.sql", size: 536, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0005_add_queueSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4e\xf3\x30\x10\x84\xcf\xbf\x25\xbf\xc3\x1c\x5b\xfd\x54\x2a\xe7\x5e\x79\x05\xce\xd5\xc6\x3b\x09\x16\xce\x3a\x38\x4e\x0b\x6f\x8f\x52\xd2\x08\x0a\x42\xdc\x2c\xcd\xf7\xad\x76\xc7\xbb\x1d\xfe\xf7\xb1\x2b\x52\x89\xc7\xc1\xbb\x50\x38\x3f\xab\x34\x89\xd0\x7c\xb6\x14\xed\xf9\xf8\x32\x71\x22\x36\xde\x01\x40\x54\x34\xb1\x1b\x59\xa2\xa4\x3b\xef\xfe\x15\xb6\x2c\xb4\x40\x9c\xa4\x84\x27\x29\x9b\xfb\xfd\x7e\x0b\xcb\x15\x36\xa5\x19\x99\x2d\xe5\xe9\xc8\x29\xa2\x79\xab\x14\xac\xce\x08\xcb\x4a\x64\x83\x32\xb1\x12\x41\xc6\x20\xca\x5b\x3d\x64\x6b\x63\xe9\xa9\x68\x72\x4e\x14\x5b\x01\x28\x5b\x99\x52\x45\x2b\x69\xe4\x82\x0f\x34\x8d\xd6\xfd\x0d\x6e\x87\x5c\x2a\xc6\x5e\x52\x8a\x56\xbf\x2d\x2e\x55\x96\xad\xaf\x89\x77\xdb\x83\x77\x6b\x59\xd1\x94\xaf\x37\x65\x1d\xaf\xf7\xce\x97\x7d\x49\x36\x4b\xf2\x31\xe2\x73\xff\x0f\xf9\x6c\xde\x69\xc9\xc3\xaf\x23\x2f\xde\x85\xfa\xe9\x97\x0e\xde\xbd\x07\x00\x00\xff\xff\x9d\x4a\x4f\x82\xd4\x01\x00\x00")

func _0005_add_queueSqlBytes() ([]byte, error) {
	return bindataRead(
		__0005_add_queueSql,
		"0005_add_queue.sql",
	)
}

func _0005_add_queueSql() (*asset, error) {
	bytes, err := _0005_add_queueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0005_add_queue.sql", size: 468, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0006_remove_application_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xc1\x6a\x33\x31\x0c\x84\xef\x0b\x7e\x87\xb9\x25\xe1\x4f\x20\xff\x39\xd7\xbe\x42\xcf\x41\xb1\xb5\xa9\x88\x57\x36\xb2\xd2\xb2\x6f\x5f\xd6\x1b\x4a\x4a\x4b\x8f\x66\xc6\xf3\x69\xe6\x70\xc0\xbf\x49\xae\x46\xce\x78\xad\x61\xa0\xec\x6c\x70\xba\x64\x86\x96\xc4\x61\x00\x80\x64\xa5\x22\x16\x6d\x6e\x24\xea\x5d\x39\x53\xad\x67\xbe\xcb\x79\xbc\xf1\x7c\x0a\x43\x18\xba\x6b\xfd\x4a\xb5\x66\x89\xe4\x52\xb4\x4b\xcf\x98\x97\xf2\xa1\x61\x88\xc6\xcb\xe3\x87\x1d\xdb\x15\xf9\x48\xc7\x65\x76\x26\x54\x93\x89\x6c\xc6\x8d\xe7\xfd\xaa\x2b\x4d\x8c\xf8\x46\x46\x71\xb9\xf8\x9d\x6c\x16\xbd\x62\xfb\xff\x78\xdc\x41\x8b\x43\xef\x39\x87\x61\xd7\xf1\xa2\x8d\xcd\x21\xea\xe5\x99\xb5\x26\x35\xce\x1c\x1d\x49\x9a\x8b\x46\xdf\x3e\xc8\xbb\x3d\x36\x5a\x3a\x67\x03\x6a\x2b\x70\xb4\x32\xf5\xf6\x3d\xf6\xf7\xb1\x28\xa5\x3f\xb7\xc2\x58\x8c\xe5\xaa\x4b\x99\x2f\x18\x8c\x47\x36\xd6\xc8\xed\xdb\x1a\x45\x91\x38\xb3\x33\x22\xb5\x48\x89\x4f\x9f\x01\x00\x00\xff\xff\x68\x09\x49\xb5\xb2\x01\x00\x00")

func _0006_remove_application_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		__0006_remove_application_tableSql,
		"0006_remove_application_table.sql",
	)
}

func _0006_remove_application_tableSql() (*asset, error) {
	bytes, err := _0006_remove_application_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0006_remove_application_table.sql", size: 434, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0007_migrate_channels_to_channel_listSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xc1\x4e\xc3\x30\x10\x44\xcf\x89\xe4\x7f\xd8\x63\x23\x5a\x84\xc4\x81\x03\xa4\x27\x7e\x81\x13\x42\x95\x6b\x4f\x5b\xab\xce\x3a\x5d\x3b\xaa\xf2\xf7\xc8\x16\x09\x4d\x85\xb8\xc5\xb3\x7e\xb3\x99\xf1\x66\x43\x0f\x9d\x3b\x8a\x4e\xa0\x8f\x5e\xd5\xda\x27\x08\x25\xbd\xf7\x20\x73\xd2\xcc\xf0\x3b\xef\x62\x52\x75\xa5\xad\x25\x13\xfc\xd0\xf1\x34\x89\xe4\x38\xe1\x08\xf9\xfc\x7a\x55\xb5\xaa\x87\xde\x66\x9f\x3b\x2e\x22\xcd\x40\xbb\x52\x75\x55\x45\x78\x98\x44\x5a\x44\x8f\x45\x98\x94\x83\xe0\x32\x80\xcd\x58\xc4\x83\x84\xae\x7c\x54\x3f\x78\x39\x5c\x4f\x10\x2c\xe4\xb2\x68\xe7\x6c\x7b\x7b\x7e\x74\xb6\x5c\x0a\x62\x21\xb4\x1f\x17\x44\xd3\x94\xff\xb5\x12\xfa\x65\xd6\x22\xdf\x76\xf2\x1e\xae\xfc\x6f\x2b\xc5\xe3\xae\x96\xe2\x62\x04\xd9\x60\x01\x51\x4e\xeb\x2c\xed\xdd\x31\x42\x9c\xf6\xd4\x8b\xeb\xb4\x8c\x74\xc6\xb8\x56\xf5\x7d\xa2\x7c\xd1\x71\x22\xc1\x01\x02\x36\x88\x8b\xf5\x14\x98\x2c\x3c\x72\xe7\x3a\x1a\x6d\x41\x1c\x12\xf1\xe0\xfd\x8d\xd9\xf4\x48\x8b\xd9\xdc\xf4\x9f\x53\x73\x82\x39\xd3\x6a\x32\xd8\xb6\xf4\x4c\x9a\xed\x1c\xe3\xad\xa5\x97\x22\xfc\xda\x6c\xe9\xa9\xc9\xe8\xc0\xee\x32\x60\x66\xa7\x24\xeb\x89\x6d\x54\x9d\xcb\xff\x0e\x00\x00\xff\xff\xd6\x3f\x57\x9d\x78\x02\x00\x00")

func _0007_migrate_channels_to_channel_listSqlBytes() ([]byte, error) {
	return bindataRead(
		__0007_migrate_channels_to_channel_listSql,
		"0007_migrate_channels_to_channel_list.sql",
	)
}

func _0007_migrate_channels_to_channel_listSql() (*asset, error) {
	bytes, err := _0007_migrate_channels_to_channel_listSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0007_migrate_channels_to_channel_list.sql", size: 632, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0008_relax_fcntSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x02\x41\x0c\x05\xd0\xb3\x81\xf4\xf0\xef\xb2\x15\xec\xd5\x16\x3c\x4b\x76\x93\x11\x21\x9b\x0c\x63\x06\x2d\xdf\xab\xa0\x0d\xbc\x65\xc1\xf9\x78\xdc\x87\x94\xe1\xda\x99\xc4\xcb\x06\x4a\x36\x37\x44\xaa\x31\x9d\x44\x15\x7b\xfa\x3c\x02\xc3\x5c\xde\xb7\xb6\x47\x61\xcb\x74\x93\x40\x64\x21\xa6\x3b\xd4\x9a\x4c\x2f\x34\xf1\xa7\xad\x4c\x4c\xdf\xf6\x25\x5f\xf1\x57\xd7\x91\xfd\x97\x5f\x99\x3e\x01\x00\x00\xff\xff\x13\xc8\x99\x0a\x9a\x00\x00\x00")

func _0008_relax_fcntSqlBytes() ([]byte, error) {
	return bindataRead(
		__0008_relax_fcntSql,
		"0008_relax_fcnt.sql",
	)
}

func _0008_relax_fcntSql() (*asset, error) {
	bytes, err := _0008_relax_fcntSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0008_relax_fcnt.sql", size: 154, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0009_adr_interval_and_install_marginSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\xb1\xca\x02\x41\x0c\x04\xe0\xfa\x5f\xd8\x77\x48\xf9\x8b\x77\x20\x82\xd5\xb5\xbe\x82\xf5\x11\x2f\xf1\x58\xc8\x26\x47\xcc\xea\xeb\x8b\x9d\xca\x76\x03\xc3\x0c\xdf\x38\xc2\xbe\x96\xd5\x31\x18\x2e\x5b\x4e\x28\xc1\x0e\x81\x57\x61\x50\x23\xce\xe9\x0f\x89\x60\x31\x69\x55\x01\xc9\xe7\xa2\xc1\xfe\x40\x81\x77\x58\xd9\x41\x2d\x40\x9b\x08\x10\xdf\xb0\x49\xc0\x61\xf8\x5e\x15\xbd\x07\x8a\x60\x14\xd3\xb9\xa2\xaf\x45\x81\x78\x29\x15\xe5\xff\x34\x1c\x77\x9d\x87\x29\xa7\x9c\x3e\x6d\x67\x7b\x6a\x57\x47\x6e\x5b\x8f\x37\xfc\x74\x1d\xc4\x94\xd3\x2b\x00\x00\xff\xff\x3d\x14\x9f\x1c\xff\x00\x00\x00")

func _0009_adr_interval_and_install_marginSqlBytes() ([]byte, error) {
	return bindataRead(
		__0009_adr_interval_and_install_marginSql,
		"0009_adr_interval_and_install_margin.sql",
	)
}

func _0009_adr_interval_and_install_marginSql() (*asset, error) {
	bytes, err := _0009_adr_interval_and_install_marginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0009_adr_interval_and_install_margin.sql", size: 255, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0010_recreate_application_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xc1\xae\xdb\x20\x10\x3c\x1b\x89\x7f\xd8\x9b\x6d\x35\xaf\x7a\x3d\x47\xef\x50\xa9\xbf\xd0\xb3\x45\x60\x93\xac\x8a\x17\x0a\xb8\x71\xa4\x7c\x7c\x05\x4e\x52\xe2\xba\xbd\x59\xeb\x9d\xd9\x99\xd9\xe5\xed\x0d\x3e\x8d\x74\x0a\x2a\x21\x7c\xf7\x52\xe8\x80\xf9\x33\xa9\x83\x45\x50\xde\x5b\xd2\x2a\x91\x63\xe8\xa4\x68\xc8\xc0\x81\x4e\x11\x03\x29\x0b\x3e\xd0\xa8\xc2\x15\x7e\xe0\x75\x27\x45\xc3\x6a\x44\xf8\xa5\x82\x3e\xab\xd0\x7d\x79\x7f\xef\x61\x62\xfa\x39\x21\xb0\x4b\xc0\x93\xb5\xb9\xc9\x60\xd4\x81\x7c\x21\x4c\x38\xa7\xe7\x4f\x90\xa2\xdf\x4b\xf1\x9c\x4f\x6c\x70\x06\x32\xf3\x50\x69\x18\xca\x0c\xc7\xb5\xae\x2e\xd7\x16\x28\x71\xc4\x90\x80\x38\xb9\xba\x43\x8a\xa6\x34\xed\xa0\x9a\xde\x4b\xd1\x44\xb4\xa8\x13\x18\x8a\x89\x58\xa7\x0e\x59\x3b\x83\x9d\xf2\x7e\xc0\x89\x76\xd0\x9e\x71\x6e\xfb\x1e\x54\x84\x05\xdf\x7e\xad\xf2\x68\xe1\x76\x83\x6d\x48\x46\xd4\x4e\x8f\xc1\x8d\xc0\xce\x60\x91\xa9\x6c\xc2\x70\x0f\x38\x17\x41\x8a\x46\x19\x03\xda\xd9\x69\x7c\xf1\x36\x2c\x79\x13\x27\x08\x78\xc4\x80\xac\x31\xbe\x2c\xc5\x31\x18\xb4\x98\x10\xb4\x8a\x5a\xdd\x27\x4c\xde\xe4\x0c\x0b\x79\xc4\xb4\xa6\xfc\x80\xee\x6e\x9d\xcc\xa2\xad\xa6\xbc\x9c\x31\x60\x31\x0c\x1f\x0f\x7f\x99\xe9\xf3\x3a\x97\x7f\x9b\x29\xb5\x6d\x3b\x59\xce\x63\xe7\xdb\xfb\xce\x2c\xc3\x0a\xe5\xb8\x90\x77\xaf\xe5\x45\x41\x7d\xc0\xdf\xdc\x85\x73\xcd\x04\xe7\xff\x4f\xb9\x29\x3e\x1f\x68\x46\x6e\x4a\xdf\x6f\x10\xaf\x6f\xf3\x4f\xcf\x5f\xef\x67\x2f\xc5\xef\x00\x00\x00\xff\xff\x24\xb4\x88\x12\x6b\x03\x00\x00")

func _0010_recreate_application_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		__0010_recreate_application_tableSql,
		"0010_recreate_application_table.sql",
	)
}

func _0010_recreate_application_tableSql() (*asset, error) {
	bytes, err := _0010_recreate_application_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0010_recreate_application_table.sql", size: 875, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0011_node_description_and_is_abpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4e\xc3\x30\x0c\x86\xcf\x54\xea\x3b\xf8\xb6\x21\xba\x27\x98\x76\xe3\x15\x38\x47\x6e\xed\x81\x45\xea\x84\xd4\x81\xf2\xf6\x28\xd9\xa4\xb5\xa3\x48\x5c\x7f\xff\xf9\xf3\xf9\xf7\xe1\x00\x4f\xa3\xbc\x26\x34\x86\x97\xd8\x36\xe8\x8d\x13\x18\xf6\x9e\x41\x03\x71\xdb\x3c\x20\x11\x0c\xc1\xe7\x51\x81\x78\x1a\x92\x44\x93\xa0\x60\x3c\x5b\xb7\x1e\xcb\xe4\xb0\x8f\xd0\x87\xe0\x19\x15\x34\x18\x68\xf6\x1e\x88\xcf\x98\xbd\xc1\x19\xfd\xc4\xc7\xb6\x69\x9b\x1c\xa9\xfc\x58\x7e\x80\x89\x6d\x15\x7c\x02\xc5\xb1\xd8\xee\x4d\x45\x86\x13\xb0\x0e\x81\x78\x4f\xfc\xe9\x38\x4b\x07\xbb\x37\x9e\x77\x8f\x35\x76\x8b\xbe\x4a\x1b\xfc\x35\xf1\x4a\x78\xdb\x43\x27\x4b\x28\x6a\xf5\xb9\xc3\x18\xbd\x0c\x58\xfc\x4e\xc8\x15\x00\xf7\xce\xdf\x90\x55\x3e\x32\xc3\x7e\x3d\xef\x2a\xe1\x85\x64\x48\x5c\xd8\x45\x89\x67\x10\x9a\x5d\xcd\xab\x1b\x04\xad\xe1\xfb\x9b\x79\x79\x84\xe7\xf0\xa5\x45\xa3\x14\xe2\xd6\xf3\xcd\xfa\xae\xcd\x2c\xd6\xfb\xab\x8e\x1a\xfb\xbb\x8d\xee\x6e\x74\xb9\xe4\x42\xfd\x57\x2f\xc7\xb6\xf9\x09\x00\x00\xff\xff\x25\x33\xdc\x86\x50\x02\x00\x00")

func _0011_node_description_and_is_abpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0011_node_description_and_is_abpSql,
		"0011_node_description_and_is_abp.sql",
	)
}

func _0011_node_description_and_is_abpSql() (*asset, error) {
	bytes, err := _0011_node_description_and_is_abpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0011_node_description_and_is_abp.sql", size: 592, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0012_class_c_nodeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\xc2\x50\x0c\x06\xe0\xb3\x81\xec\xf0\xdf\xa5\x13\xf4\xea\x0a\x9e\x4b\xda\xa4\x52\x48\x93\xf2\x5e\x1e\xae\xef\x55\xd0\x05\xbe\x69\xc2\xfd\x3c\x5e\x4d\xca\xf0\xbc\x98\xc4\xcb\x1a\x4a\x56\x37\x44\xaa\x31\xdd\x44\x15\x5b\xfa\x38\x03\x47\x5f\x36\x97\xde\x97\x0d\x6b\xa6\x9b\x04\x22\x0b\x31\xdc\xa1\xb6\xcb\xf0\xc2\x2e\xde\x6d\x66\x62\xfa\xb6\x1f\xf9\x8e\xbf\xba\xb6\xbc\x7e\xf9\x99\xe9\x13\x00\x00\xff\xff\x96\xaf\x81\x4b\x9a\x00\x00\x00")

func _0012_class_c_nodeSqlBytes() ([]byte, error) {
	return bindataRead(
		__0012_class_c_nodeSql,
		"0012_class_c_node.sql",
	)
}

func _0012_class_c_nodeSql() (*asset, error) {
	bytes, err := _0012_class_c_nodeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0012_class_c_node.sql", size: 154, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0013_application_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x8b\xdb\x40\x0c\x85\xcf\x35\xf8\x3f\xe8\xd8\xd2\x04\xda\x40\x4f\xb9\xf6\x2f\xec\x59\xc8\x33\xb2\x57\x20\x6b\xcc\x8c\xbc\xc9\xfe\xfb\xc5\x21\x2c\x8e\x9d\x6c\xbc\xd7\xd1\x7b\x4f\x1a\xde\xb7\xdf\xc3\xef\x5e\xba\x4c\xce\xf0\x32\xd4\x15\xa9\x73\x06\xa7\x46\x19\x68\x18\x54\x02\xb9\x24\xab\xab\x1f\x14\x23\x84\xa4\x63\x6f\x90\xcf\x18\x59\xe9\x1d\xc4\xfc\x00\x96\x1c\x6c\x54\x85\xc8\x2d\x8d\xea\xf0\x67\xb7\x94\xff\xc5\x98\x31\xb5\x6d\x61\xdf\xe8\x09\xaf\x64\xc6\x8a\x2a\xc5\x51\x22\x34\xd2\x89\x39\x64\x6e\x39\xb3\x05\x2e\x37\x0a\x48\x06\x91\x95\x9d\x61\x5a\x31\x25\xaf\x6e\xc0\x93\x58\x4c\xa7\xcd\x37\x1f\x30\xe6\xad\x62\x56\x3a\x63\x1b\xcc\xa1\x49\x49\x99\x6c\xed\x69\x49\x0b\x2f\x7c\x14\x33\x8a\x39\xe7\x37\xd2\x69\x15\x77\x9c\x9f\x6f\x13\x2b\x4e\xaa\x97\x5e\xb0\xa7\xdc\xc9\xf4\xf9\x20\x3d\xe9\xcf\x7f\xbb\xc3\xaf\x0d\x09\x05\xa9\x19\xbe\x77\xab\x14\x0c\x4a\xa5\x60\x78\xe2\x3b\xd6\xd5\x2d\x46\x96\x22\xdf\x66\x8d\x85\x71\x06\x17\x16\x76\x17\xeb\xca\x96\xe4\xba\x9a\x23\xfb\x3f\x9d\xec\x2b\x68\x63\x4e\xc3\x92\xda\xdd\xea\x7d\x86\xe7\x72\xb8\xe0\x70\xed\xbd\x62\xb5\x1e\x4c\xfc\xac\x5e\x3f\x41\x59\x4e\xe6\x28\x2c\x67\x77\x0a\x5f\x49\x2e\x8d\xde\x79\xbd\x76\xf6\xa8\x94\xb9\xfa\x51\x2b\xc7\xba\xfa\x08\x00\x00\xff\xff\x77\x70\xa3\x98\x26\x04\x00\x00")

func _0013_application_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		__0013_application_settingsSql,
		"0013_application_settings.sql",
	)
}

func _0013_application_settingsSql() (*asset, error) {
	bytes, err := _0013_application_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0013_application_settings.sql", size: 1062, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0014_users_and_application_usersSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4b\x4f\xdb\x40\x10\x3e\x63\xc9\xff\x61\x84\x22\x91\xa8\x89\x08\x49\x81\xa8\x28\x87\xb6\x11\xa5\x3c\x5a\x5a\x0a\x34\xbd\x58\x63\x7b\x88\xb7\xd8\xbb\x66\x1f\x09\xc9\xaf\xaf\xd6\x8e\xc1\x76\x4c\x1f\xb7\xe6\x90\x6c\x76\xe7\x9b\x99\x6f\xbe\x99\xe9\xf5\xe0\x55\xc2\x66\x12\x35\xc1\x75\xea\x3a\x81\x24\x7b\xd4\xe8\xc7\x04\xdb\x46\x91\xdc\x86\xb6\xeb\x6c\xb1\x10\x7c\x36\x53\x24\x19\xc6\x90\x4a\x96\xa0\x5c\xc2\x3d\x2d\xbb\xae\xb3\x95\x63\x42\x0f\x35\x68\x96\x90\xd2\x98\xa4\xb0\x60\x3a\xca\xfe\xc2\x4a\x70\x02\x2e\x34\x70\x13\xc7\xd6\xde\xa4\xe1\xbf\xd9\x2b\x92\x1c\x13\x82\x20\x42\x89\x81\x26\x09\x73\x94\x4b\xc6\x67\xd0\xde\xeb\xf7\x3b\x15\xe3\x14\x95\x5a\x08\x19\x7a\x11\xaa\xa8\x09\x31\xa8\x23\x14\x29\xc5\x04\xf7\xb4\x8e\x2d\x47\xc6\x75\xe5\x99\x29\x0f\x03\xcd\xe6\x04\xbe\x10\x31\x21\xdf\x78\x0d\x13\xc6\x37\x1e\x5d\xa7\x73\xe4\x3a\x4f\x05\x35\x9c\x3d\x18\x02\xc6\x43\x7a\x04\x16\x3e\x7a\x96\x94\xf7\xc4\x4c\xf0\x75\xb1\xdb\xc5\x95\x45\xaf\xb1\x2f\x80\xbc\x54\xd2\x1d\x7b\x6c\xc0\x5a\xb2\x96\xb9\x97\xa2\xd6\x24\xb9\x27\x52\x55\xc9\x26\x97\x17\xd3\x34\x66\x01\x6a\x4b\xde\x42\xff\x0b\xa1\xbd\x3c\x81\xb2\x0a\x20\xe9\x8e\x24\xf1\x80\x54\xd1\x92\x82\x43\x48\x31\x69\x82\x00\x55\x80\x21\x59\x78\x99\xcf\xef\xbd\x94\x2c\x9b\x5d\xbd\x28\x6b\xd7\x56\x71\x2b\x57\xb3\xbd\xce\xb7\x0b\xd5\xc8\x9d\x9a\xf6\xcf\xfa\xd5\x2b\xee\x15\x8c\x05\xdf\x50\xa3\xf0\xde\xd8\x08\x1b\x8e\x6a\xdc\x9b\xfc\xd5\x92\xcc\x32\xec\xf5\x60\x16\x0b\x1f\x63\xc8\xe9\xb6\x8b\xf1\x79\x93\x5f\x74\x5c\x87\x71\x45\x52\x03\xe3\x5a\x94\x17\xc2\x73\x2f\x54\x95\x2e\x0f\xec\xc6\x3c\xd6\xc6\xad\x32\x5e\xe5\xb2\xbb\x4e\x07\xe6\x18\x1b\x52\x59\x2c\x2e\x16\xed\x4e\xb7\x7c\xd8\xc9\xcc\x76\xb2\xe3\xe5\xbb\xb3\xc9\xf1\xa0\xa5\x22\xdc\xdf\x1b\xb4\xf6\xfa\xf6\xd3\x7a\x6d\x86\xd1\xf9\xe8\x5e\xce\xe3\x8b\x8f\x57\xfd\x33\xfe\x7e\xfa\x9d\x2e\x16\xe3\x71\xeb\xc3\x61\x70\xa8\xcd\xf5\xf4\x61\xb0\xba\x3a\xc5\x6b\x92\x66\xfe\xe9\x7c\xf7\xec\x78\xd8\x0f\x87\xdf\x6e\x26\x9f\xbf\xde\x4c\xf6\x0f\x16\xab\xf9\xe9\x34\x09\x86\x89\xb9\xfd\x29\x50\xac\x4e\x46\xfe\xc9\xe9\xa1\x1c\xad\xa6\xa3\xf0\xf6\xe0\x52\xab\x81\x7f\xbb\x8c\x8e\xef\xee\xfd\x5d\xe3\x7f\xf9\xa1\xde\x8e\xc7\x59\x2e\x7d\xfb\xa5\xa5\xa1\xe2\xb7\xe8\x84\xac\xd2\x4f\x8b\x76\x22\x16\xdc\x75\x42\x29\xd2\xbf\x97\xf4\xe8\xcf\x80\x75\xc3\x14\x96\xcd\x43\x9e\xa5\x53\xf3\x54\x59\x2b\x9b\x81\x9a\xb6\x4e\x35\x48\xde\x17\x47\xae\xf3\x2b\x00\x00\xff\xff\xe6\xc7\x62\xce\x4f\x06\x00\x00")

func _0014_users_and_application_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		__0014_users_and_application_usersSql,
		"0014_users_and_application_users.sql",
	)
}

func _0014_users_and_application_usersSql() (*asset, error) {
	bytes, err := _0014_users_and_application_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0014_users_and_application_users.sql", size: 1615, mode: os.FileMode(493), modTime: time.Unix(1493103863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.sql": _0001_initialSql,
	"0002_join_accept_params.sql": _0002_join_accept_paramsSql,
	"0003_rx_window_and_rx2_dr.sql": _0003_rx_window_and_rx2_drSql,
	"0004_add_node_apps_nwks_key_name_devaddr.sql": _0004_add_node_apps_nwks_key_name_devaddrSql,
	"0005_add_queue.sql": _0005_add_queueSql,
	"0006_remove_application_table.sql": _0006_remove_application_tableSql,
	"0007_migrate_channels_to_channel_list.sql": _0007_migrate_channels_to_channel_listSql,
	"0008_relax_fcnt.sql": _0008_relax_fcntSql,
	"0009_adr_interval_and_install_margin.sql": _0009_adr_interval_and_install_marginSql,
	"0010_recreate_application_table.sql": _0010_recreate_application_tableSql,
	"0011_node_description_and_is_abp.sql": _0011_node_description_and_is_abpSql,
	"0012_class_c_node.sql": _0012_class_c_nodeSql,
	"0013_application_settings.sql": _0013_application_settingsSql,
	"0014_users_and_application_users.sql": _0014_users_and_application_usersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.sql": &bintree{_0001_initialSql, map[string]*bintree{}},
	"0002_join_accept_params.sql": &bintree{_0002_join_accept_paramsSql, map[string]*bintree{}},
	"0003_rx_window_and_rx2_dr.sql": &bintree{_0003_rx_window_and_rx2_drSql, map[string]*bintree{}},
	"0004_add_node_apps_nwks_key_name_devaddr.sql": &bintree{_0004_add_node_apps_nwks_key_name_devaddrSql, map[string]*bintree{}},
	"0005_add_queue.sql": &bintree{_0005_add_queueSql, map[string]*bintree{}},
	"0006_remove_application_table.sql": &bintree{_0006_remove_application_tableSql, map[string]*bintree{}},
	"0007_migrate_channels_to_channel_list.sql": &bintree{_0007_migrate_channels_to_channel_listSql, map[string]*bintree{}},
	"0008_relax_fcnt.sql": &bintree{_0008_relax_fcntSql, map[string]*bintree{}},
	"0009_adr_interval_and_install_margin.sql": &bintree{_0009_adr_interval_and_install_marginSql, map[string]*bintree{}},
	"0010_recreate_application_table.sql": &bintree{_0010_recreate_application_tableSql, map[string]*bintree{}},
	"0011_node_description_and_is_abp.sql": &bintree{_0011_node_description_and_is_abpSql, map[string]*bintree{}},
	"0012_class_c_node.sql": &bintree{_0012_class_c_nodeSql, map[string]*bintree{}},
	"0013_application_settings.sql": &bintree{_0013_application_settingsSql, map[string]*bintree{}},
	"0014_users_and_application_users.sql": &bintree{_0014_users_and_application_usersSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

